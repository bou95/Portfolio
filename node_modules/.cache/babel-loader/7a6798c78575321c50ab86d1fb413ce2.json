{"ast":null,"code":"import React from 'react';\n\nvar isCheckBoxInput = element => element.type === 'checkbox';\n\nvar isDateObject = value => value instanceof Date;\n\nvar isNullOrUndefined = value => value == null;\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\n\nvar getEventValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\n\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\n\nvar compact = value => value.filter(Boolean);\n\nvar isUndefined = val => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nconst EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nconst HookFormContext = React.createContext(null);\n\nconst useFormContext = () => React.useContext(HookFormContext);\n\nconst FormProvider = props => React.createElement(HookFormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\n\nvar getProxyFormState = function (formState, _proxyFormState, localProxyFormState) {\n  let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const result = {};\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      }\n    });\n  }\n\n  return result;\n};\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\n\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName ? name === signalName : !name || !signalName || name === signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n  const _props = React.useRef(props);\n\n  _props.current = props;\n  React.useEffect(() => {\n    const tearDown = subscription => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription = !props.disabled && _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name,\n    exact\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n\n  const _name = React.useRef(name);\n\n  const _mounted = React.useRef(true);\n\n  _name.current = name;\n  const callback = React.useCallback(value => _mounted.current && shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), value)), [control, exact]);\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state\n  });\n  React.useEffect(() => () => {\n    _mounted.current = false;\n  }, []);\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\n\nvar isString = value => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\n  const isArray = Array.isArray(names);\n\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n\n  if (isArray) {\n    return names.map(fieldName => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n\nvar isFunction = value => typeof value === 'function';\n\nvar objectHasFunction = data => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact\n  } = props || {};\n\n  const _name = React.useRef(name);\n\n  _name.current = name;\n  const callback = React.useCallback(formState => {\n    if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n      const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\n      updateValue(isUndefined(_name.current) || isObject(fieldValues) && !objectHasFunction(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? [...fieldValues] : isUndefined(fieldValues) ? defaultValue : fieldValues);\n    }\n  }, [control, exact, defaultValue]);\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\n\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n    exact: !isArrayField\n  });\n  const formState = useFormState({\n    control,\n    name\n  });\n\n  const _registerProps = React.useRef(control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  })));\n\n  React.useEffect(() => {\n    const updateMounted = (name, value) => {\n      const field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n\n      (isArrayField ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n  return {\n    field: {\n      name,\n      value,\n      onChange: React.useCallback(event => {\n        _registerProps.current.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      }, [name]),\n      onBlur: React.useCallback(() => {\n        _registerProps.current.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      }, [name, control]),\n      ref: React.useCallback(elm => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }, [name, control._fields])\n    },\n    formState,\n    fieldState: control.getFieldState(name, formState)\n  };\n}\n\nconst Controller = props => props.render(useController(props));\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\n\nvar isKey = value => /^\\w*$/.test(value);\n\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar getFocusFieldName = function (name, index) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\n};\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some(watchName => name.startsWith(watchName) && /^\\.\\w+/.test(name.slice(watchName.length))));\n\nfunction append(data, value) {\n  return [...data, ...convertToArrayPayload(value)];\n}\n\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\n\nvar moveArrayAt = (data, from, to) => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n\n  data.splice(to, 0, data.splice(from, 1)[0]);\n  return data;\n};\n\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(control._getFieldArray(name));\n  const ids = React.useRef(control._getFieldArray(name).map(generateId));\n\n  const _fieldIds = React.useRef(fields);\n\n  const _name = React.useRef(name);\n\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n\n  control._names.array.add(name);\n\n  const callback = React.useCallback(_ref => {\n    let {\n      values,\n      name: fieldArrayName\n    } = _ref;\n\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n  useSubscribe({\n    callback,\n    subject: control._subjects.array\n  });\n  const updateValues = React.useCallback(updatedFieldArrayValues => {\n    _actioned.current = true;\n\n    control._updateFieldArray(name, updatedFieldArrayValues);\n  }, [control, name]);\n\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n    ids.current = append(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, append, {\n      argA: fillEmptyArray(value)\n    });\n  };\n\n  const prepend$1 = (value, options) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prepend(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n      argA: fillEmptyArray(value)\n    });\n  };\n\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index\n    });\n  };\n\n  const insert$1 = (index, value, options) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insert(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    });\n  };\n\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, false);\n  };\n\n  const move = (from, to) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, false);\n  };\n\n  const update = (index, value) => {\n    const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, value);\n    ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n\n    control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n      argA: index,\n      argB: value\n    }, true, false);\n  };\n\n  const replace = value => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n\n    control._updateFieldArray(name, [...updatedFieldArrayValues], data => data, {}, true, false);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then(result => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) && control.unregister(name);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n    append: React.useCallback(append$1, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert$1, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(() => fields.map((field, index) => Object.assign(Object.assign({}, field), {\n      [keyName]: ids.current[index] || generateId()\n    })), [fields, keyName])\n  };\n};\n\nfunction createSubject() {\n  let _observers = [];\n\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = observer => {\n    _observers.push(observer);\n\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter(o => o !== observer);\n      }\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\n\nvar isBoolean = value => typeof value === 'boolean';\n\nvar isFileInput = element => element.type === 'file';\n\nvar isHTMLElement = value => value instanceof HTMLElement;\n\nvar isMultipleSelect = element => element.type === `select-multiple`;\n\nvar isRadioInput = element => element.type === 'radio';\n\nvar isRadioOrCheckbox = ref => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\n\nvar live = ref => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nfunction markFieldsDirty(data) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : Object.assign({}, markFieldsDirty(data[key]));\n        } else {\n          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = (value, _ref2) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref2;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\n\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\n\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(_ref3 => {\n      let {\n        value\n      } = _ref3;\n      return value;\n    });\n  }\n\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getRuleValue = rule => isUndefined(rule) ? undefined : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;\n\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name\n  };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar isMessage = value => isString(value) || React.isValidElement(value);\n\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\n\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\n\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n\n  if (!mount || disabled) {\n    return {};\n  }\n\n  const inputRef = refs ? refs[0] : ref;\n\n  const setCustomValidity = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\n\nfunction createFormControl() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n\n  let _defaultValues = _options.defaultValues || {};\n\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce = (callback, wait) => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray = function (name) {\n    let values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let method = arguments.length > 2 ? arguments[2] : undefined;\n    let args = arguments.length > 3 ? arguments[3] : undefined;\n    let shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldUpdateFieldsAndErrors = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n    if (args && method) {\n      _stateFlags.action = true;\n\n      if (shouldUpdateFieldsAndErrors && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (_proxyFormState.errors && shouldUpdateFieldsAndErrors && Array.isArray(get(_formState.errors, name))) {\n        const errors = method(get(_formState.errors, name), args.argA, args.argB);\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (_proxyFormState.touchedFields && Array.isArray(get(_formState.touchedFields, name))) {\n        const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n\n  const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n    const field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async function (fields, shouldOnlyCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = name => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n\n  const setFieldValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    let fieldValue = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n    options.shouldValidate && trigger(name);\n  };\n\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n\n    const isFieldArray = _names.array.has(name);\n\n    const cloneValue = cloneObject(value);\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n\n    _subjects.watch.next({\n      name\n    });\n  };\n\n  const onChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const watched = isWatched(name, _names, isBlurEvent);\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, watched ? {} : fieldState));\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true\n      });\n\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger = async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n\n    _subjects.state.next({\n      isValidating: true\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n      name\n    }), _options.resolver ? {\n      isValid\n    } : {}), {\n      errors: _formState.errors,\n      isValidating: false\n    }));\n\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n\n  const getFieldState = (name, formState) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name)\n  });\n\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n\n    _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n\n    _names.mount.add(name);\n\n    field ? disabledIsDefined && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true, options.value);\n    return Object.assign(Object.assign(Object.assign({}, disabledIsDefined ? {\n      disabled: options.disabled\n    } : {}), _options.shouldUseNativeValidation ? {\n      required: !!options.required,\n      min: getRuleValue(options.min),\n      max: getRuleValue(options.max),\n      minLength: getRuleValue(options.minLength),\n      maxLength: getRuleValue(options.maxLength),\n      pattern: getRuleValue(options.pattern)\n    } : {}), {\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (radioOrCheckbox ? refs.find(option => option === fieldRef) : fieldRef === field._f.ref) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: Object.assign(Object.assign({}, field._f), radioOrCheckbox ? {\n              refs: refs.concat(fieldRef).filter(live),\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            } : {\n              ref: fieldRef\n            })\n          });\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n\n    let hasNoPromiseError = true;\n    let fieldValues = _options.shouldUnregister ? cloneObject(_formValues) : Object.assign({}, _formValues);\n\n    _subjects.state.next({\n      isSubmitting: true\n    });\n\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n\n  const resetField = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next(Object.assign({}, _formState));\n    }\n  };\n\n  const reset = function (formValues) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = formValues && !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.array.next({\n        values\n      });\n\n      _subjects.watch.next({\n        values\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, _ref4) => {\n        let [key, value] = _ref4;\n        return Object.assign(Object.assign({}, previous), {\n          [key]: value !== get(_defaultValues, key)\n        });\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  };\n\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n\n      get _fields() {\n        return _fields;\n      },\n\n      get _formValues() {\n        return _formValues;\n      },\n\n      get _stateFlags() {\n        return _stateFlags;\n      },\n\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n\n      get _defaultValues() {\n        return _defaultValues;\n      },\n\n      get _names() {\n        return _names;\n      },\n\n      set _names(value) {\n        _names = value;\n      },\n\n      get _formState() {\n        return _formState;\n      },\n\n      set _formState(value) {\n        _formState = value;\n      },\n\n      get _options() {\n        return _options;\n      },\n\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState\n  };\n}\n\nfunction useForm() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  const _formControl = React.useRef();\n\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n\n  const control = _formControl.current.control;\n  const callback = React.useCallback(value => {\n    if (shouldRenderFormState(value, control._proxyFormState, true)) {\n      control._formState = Object.assign(Object.assign({}, control._formState), value);\n      updateFormState(Object.assign({}, control._formState));\n    }\n  }, [control]);\n  useSubscribe({\n    subject: control._subjects.state,\n    callback\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n\n      control._subjects.state.next({});\n    }\n\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\n\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"mappings":"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","names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","source","copy","HookFormContext","React","createContext","useContext","props","Provider","omit","children","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","get","_key","keys","length","formStateData","isEmptyObject","find","signalName","exact","convertToArrayPayload","currentName","startsWith","_props","useRef","useEffect","tearDown","subscription","unsubscribe","disabled","subject","subscribe","next","callback","useFormState","methods","useFormContext","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_mounted","useCallback","shouldSubscribeByName","shouldRenderFormState","useSubscribe","_subjects","state","getProxyFormState","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","useWatch","fieldValues","generateWatchOutput","values","_formValues","updateValue","objectHasFunction","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","isNameInFieldArray","array","_defaultValues","_registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","getEventValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","getFieldState","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","d","performance","now","c","r","Math","random","toString","options","shouldFocus","focusName","focusIndex","isBlurEvent","has","watchName","slice","append","cloneObject","Set","insert","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","sort","a","b","indexA","indexB","useFieldArray","keyName","setFields","_getFieldArray","ids","generateId","_fieldIds","_actioned","fieldArrayName","updateValues","updatedFieldArrayValues","_updateFieldArray","appendValue","appendAt","getFocusFieldName","argA","fillEmptyArray","prependValue","prependAt","remove","removeArrayAt","insertValue","insertAt","argB","swap","swapArrayAt","move","moveArrayAt","update","updateAt","item","isWatched","_executeSchema","then","error","_updateValid","useMemo","createSubject","_observers","observer","push","o","observers","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","isConnected","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","isBoolean","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","schemaErrorLookup","join","foundError","pop","isTouched","isSubmitted","reValidateMode","isValidElement","isMessage","validationData","inputValue","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","getValidateError","validationResult","defaultOptions","shouldFocusError","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldUpdateFieldsAndErrors","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","getFieldValue","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","live","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","invalid","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","concat","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getEventValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/utils/isFunction.ts","../src/utils/objectHasFunction.ts","../src/useWatch.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/generateId.ts","../src/logic/getFocusFieldName.ts","../src/logic/isWatched.ts","../src/utils/append.ts","../src/utils/cloneObject.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/update.ts","../src/useFieldArray.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/getValidationModes.ts","../src/utils/isBoolean.ts","../src/utils/isFileInput.ts","../src/utils/isHTMLElement.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/isWeb.ts","../src/utils/live.ts","../src/utils/unset.ts","../src/logic/getDirtyFields.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/utils/isRegex.ts","../src/logic/getRuleValue.ts","../src/logic/hasValidation.ts","../src/logic/schemaErrorLookup.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/logic/createFormControl.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default <TValue>(value: TValue[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {} as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n  const _mounted = React.useRef(true);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (value) =>\n      _mounted.current &&\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    [control, exact],\n  );\n\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state,\n  });\n\n  React.useEffect(\n    () => () => {\n      _mounted.current = false;\n    },\n    [],\n  );\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : isUndefined(fieldValues)\n            ? defaultValue\n            : fieldValues,\n        );\n      }\n    },\n    [control, exact, defaultValue],\n  );\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback,\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n\n  const _registerProps = React.useRef(\n    control.register(name, {\n      ...props.rules,\n      value,\n    }),\n  );\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      )\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      name,\n      value,\n      onChange: React.useCallback(\n        (event) => {\n          _registerProps.current.onChange({\n            target: {\n              value: getEventValue(event),\n              name: name as InternalFieldName,\n            },\n            type: EVENTS.CHANGE,\n          });\n        },\n        [name],\n      ),\n      onBlur: React.useCallback(() => {\n        _registerProps.current.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      }, [name, control]),\n      ref: React.useCallback(\n        (elm) => {\n          const field = get(control._fields, name);\n\n          if (elm && field && elm.focus) {\n            field._f.ref = {\n              focus: () => elm.focus(),\n              setCustomValidity: (message: string) =>\n                elm.setCustomValidity(message),\n              reportValidity: () => elm.reportValidity(),\n            };\n          }\n        },\n        [name, control._fields],\n      ),\n    },\n    formState,\n    fieldState: control.getFieldState(name, formState),\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const callback = React.useCallback(({ values, name: fieldArrayName }) => {\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n\n  useSubscribe({\n    callback,\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._updateFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray(name),\n      index,\n      value,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      <T>(data: T): T => data,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n};\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndErrors = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndErrors && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndErrors &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: refs.concat(fieldRef).filter(live),\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"]},"metadata":{},"sourceType":"module"}