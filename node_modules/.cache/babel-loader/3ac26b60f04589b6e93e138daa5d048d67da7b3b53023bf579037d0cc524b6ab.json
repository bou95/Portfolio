{"ast":null,"code":"import React from 'react';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isDateObject = value => value instanceof Date;\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\nvar getEventValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nvar compact = value => value.filter(Boolean);\nvar isUndefined = val => val === undefined;\nvar get = (obj, path, defaultValue) => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n  const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\nconst EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nconst HookFormContext = React.createContext(null);\nconst useFormContext = () => React.useContext(HookFormContext);\nconst FormProvider = props => React.createElement(HookFormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\nvar getProxyFormState = function (formState, _proxyFormState, localProxyFormState) {\n  let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const result = {};\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key;\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      }\n    });\n  }\n  return result;\n};\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName ? name === signalName : !name || !signalName || name === signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\nfunction useSubscribe(props) {\n  const _props = React.useRef(props);\n  _props.current = props;\n  React.useEffect(() => {\n    const tearDown = subscription => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n    const subscription = !props.disabled && _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name,\n    exact\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  const _name = React.useRef(name);\n  const _mounted = React.useRef(true);\n  _name.current = name;\n  const callback = React.useCallback(value => _mounted.current && shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), value)), [control, exact]);\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state\n  });\n  React.useEffect(() => () => {\n    _mounted.current = false;\n  }, []);\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\nvar isString = value => typeof value === 'string';\nvar generateWatchOutput = (names, _names, formValues, isGlobal) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n  if (isArray) {\n    return names.map(fieldName => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n  }\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\nvar isFunction = value => typeof value === 'function';\nvar objectHasFunction = data => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact\n  } = props || {};\n  const _name = React.useRef(name);\n  _name.current = name;\n  const callback = React.useCallback(formState => {\n    if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n      const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\n      updateValue(isUndefined(_name.current) || isObject(fieldValues) && !objectHasFunction(fieldValues) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? [...fieldValues] : isUndefined(fieldValues) ? defaultValue : fieldValues);\n    }\n  }, [control, exact, defaultValue]);\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n    exact: !isArrayField\n  });\n  const formState = useFormState({\n    control,\n    name\n  });\n  const _registerProps = React.useRef(control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  })));\n  React.useEffect(() => {\n    const updateMounted = (name, value) => {\n      const field = get(control._fields, name);\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n      (isArrayField ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n  return {\n    field: {\n      name,\n      value,\n      onChange: React.useCallback(event => {\n        _registerProps.current.onChange({\n          target: {\n            value: getEventValue(event),\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      }, [name]),\n      onBlur: React.useCallback(() => {\n        _registerProps.current.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      }, [name, control]),\n      ref: React.useCallback(elm => {\n        const field = get(control._fields, name);\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }, [name, control._fields])\n    },\n    formState,\n    fieldState: control.getFieldState(name, formState)\n  };\n}\nconst Controller = props => props.render(useController(props));\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar getFocusFieldName = function (name, index) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || \"\".concat(name, \".\").concat(isUndefined(options.focusIndex) ? index : options.focusIndex, \".\") : '';\n};\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some(watchName => name.startsWith(watchName) && /^\\.\\w+/.test(name.slice(watchName.length))));\nfunction append(data, value) {\n  return [...data, ...convertToArrayPayload(value)];\n}\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n  return copy;\n}\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\nvar moveArrayAt = (data, from, to) => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n  return data;\n};\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(control._getFieldArray(name));\n  const ids = React.useRef(control._getFieldArray(name).map(generateId));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n  const callback = React.useCallback(_ref => {\n    let {\n      values,\n      name: fieldArrayName\n    } = _ref;\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n  useSubscribe({\n    callback,\n    subject: control._subjects.array\n  });\n  const updateValues = React.useCallback(updatedFieldArrayValues => {\n    _actioned.current = true;\n    control._updateFieldArray(name, updatedFieldArrayValues);\n  }, [control, name]);\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n    ids.current = append(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, append, {\n      argA: fillEmptyArray(value)\n    });\n  };\n  const prepend$1 = (value, options) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prepend(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n      argA: fillEmptyArray(value)\n    });\n  };\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index\n    });\n  };\n  const insert$1 = (index, value, options) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insert(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    });\n  };\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, false);\n  };\n  const move = (from, to) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, false);\n  };\n  const update = (index, value) => {\n    const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, value);\n    ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n      argA: index,\n      argB: value\n    }, true, false);\n  };\n  const replace = value => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(name, [...updatedFieldArrayValues], data => data, {}, true, false);\n  };\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n    isWatched(name, control._names) && control._subjects.state.next({});\n    if (_actioned.current) {\n      control._executeSchema([name]).then(result => {\n        const error = get(result.errors, name);\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) && control.unregister(name);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n    append: React.useCallback(append$1, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert$1, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(() => fields.map((field, index) => Object.assign(Object.assign({}, field), {\n      [keyName]: ids.current[index] || generateId()\n    })), [fields, keyName])\n  };\n};\nfunction createSubject() {\n  let _observers = [];\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n  const subscribe = observer => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter(o => o !== observer);\n      }\n    };\n  };\n  const unsubscribe = () => {\n    _observers = [];\n  };\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    const val1 = object1[key];\n    if (!keys2.includes(key)) {\n      return false;\n    }\n    if (key !== 'ref') {\n      const val2 = object2[key];\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isBoolean = value => typeof value === 'boolean';\nvar isFileInput = element => element.type === 'file';\nvar isHTMLElement = value => value instanceof HTMLElement;\nvar isMultipleSelect = element => element.type === \"select-multiple\";\nvar isRadioInput = element => element.type === 'radio';\nvar isRadioOrCheckbox = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nvar live = ref => isHTMLElement(ref) && ref.isConnected;\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nfunction markFieldsDirty(data) {\n  let fields = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const isParentNodeArray = Array.isArray(data);\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n  return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n  const isParentNodeArray = Array.isArray(data);\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {\n        if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : Object.assign({}, markFieldsDirty(data[key]));\n        } else {\n          getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n  return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, _ref2) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref2;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(_ref3 => {\n      let {\n        value\n      } = _ref3;\n      return value;\n    });\n  }\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\nvar isRegex = value => value instanceof RegExp;\nvar getRuleValue = rule => isUndefined(rule) ? undefined : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n  const names = name.split('.');\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n    names.pop();\n  }\n  return {\n    name\n  };\n}\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\nvar isMessage = value => isString(value) || React.isValidElement(value);\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef = refs ? refs[0] : ref;\n  const setCustomValidity = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name].message);\n        return error;\n      }\n    }\n  }\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidity(validateError.message);\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  setCustomValidity(true);\n  return error;\n};\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nfunction createFormControl() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n  const debounce = (callback, wait) => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuildInValidation(_fields, true);\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n    return isValid;\n  };\n  const _updateFieldArray = function (name) {\n    let values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let method = arguments.length > 2 ? arguments[2] : undefined;\n    let args = arguments.length > 3 ? arguments[3] : undefined;\n    let shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldUpdateFieldsAndErrors = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndErrors && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n      if (_proxyFormState.errors && shouldUpdateFieldsAndErrors && Array.isArray(get(_formState.errors, name))) {\n        const errors = method(get(_formState.errors, name), args.argA, args.argB);\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n      if (_proxyFormState.touchedFields && Array.isArray(get(_formState.touchedFields, name))) {\n        const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n  const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n    const field = get(_fields, name);\n    if (field) {\n      const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n      _stateFlags.mount && _updateValid();\n    }\n  };\n  const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;\n    }\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n      _subjects.state.next(updatedFormState);\n    }\n    validateFields[name]--;\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n      validateFields = {};\n    }\n  };\n  const _executeSchema = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n    return errors;\n  };\n  const executeBuildInValidation = async function (fields, shouldOnlyCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n    for (const name in fields) {\n      const field = fields[name];\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n    return context.valid;\n  };\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n    _names.unMount = new Set();\n  };\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n  const _getFieldArray = name => compact(get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n  const setFieldValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    let fieldValue = value;\n    if (field) {\n      const fieldReference = field._f;\n      if (fieldReference) {\n        !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name\n            });\n          }\n        }\n      }\n    }\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n    options.shouldValidate && trigger(name);\n  };\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = \"\".concat(name, \".\").concat(fieldKey);\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n    set(_formValues, name, cloneValue);\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);\n    }\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name\n    });\n  };\n  const onChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);\n      const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const watched = isWatched(name, _names, isBlurEvent);\n      set(_formValues, name, fieldValue);\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, watched ? {} : fieldState));\n      }\n      !isBlurEvent && watched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n      _subjects.state.next({\n        isValidating: true\n      });\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n  const trigger = async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n    _subjects.state.next({\n      isValidating: true\n    });\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n    _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n      name\n    }), _options.resolver ? {\n      isValid\n    } : {}), {\n      errors: _formState.errors,\n      isValidating: false\n    }));\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const getFieldState = (name, formState) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name)\n  });\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n    _subjects.state.next({\n      errors: _formState.errors\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n    _subjects.watch.next({});\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n    !options.keepIsValid && _updateValid();\n  };\n  const register = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    _names.mount.add(name);\n    field ? disabledIsDefined && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true, options.value);\n    return Object.assign(Object.assign(Object.assign({}, disabledIsDefined ? {\n      disabled: options.disabled\n    } : {}), _options.shouldUseNativeValidation ? {\n      required: !!options.required,\n      min: getRuleValue(options.min),\n      max: getRuleValue(options.max),\n      minLength: getRuleValue(options.minLength),\n      maxLength: getRuleValue(options.maxLength),\n      pattern: getRuleValue(options.pattern)\n    } : {}), {\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n          if (radioOrCheckbox ? refs.find(option => option === fieldRef) : fieldRef === field._f.ref) {\n            return;\n          }\n          set(_fields, name, {\n            _f: Object.assign(Object.assign({}, field._f), radioOrCheckbox ? {\n              refs: refs.concat(fieldRef).filter(live),\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            } : {\n              ref: fieldRef\n            })\n          });\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n          if (field._f) {\n            field._f.mount = false;\n          }\n          (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n    let hasNoPromiseError = true;\n    let fieldValues = _options.shouldUnregister ? cloneObject(_formValues) : Object.assign({}, _formValues);\n    _subjects.state.next({\n      isSubmitting: true\n    });\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n  const resetField = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n      }\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n      _subjects.state.next(Object.assign({}, _formState));\n    }\n  };\n  const reset = function (formValues) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = formValues && !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n      _subjects.array.next({\n        values\n      });\n      _subjects.watch.next({\n        values\n      });\n    }\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, _ref4) => {\n        let [key, value] = _ref4;\n        return Object.assign(Object.assign({}, previous), {\n          [key]: value !== get(_defaultValues, key)\n        });\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  };\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState\n  };\n}\nfunction useForm() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const _formControl = React.useRef();\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n  const control = _formControl.current.control;\n  const callback = React.useCallback(value => {\n    if (shouldRenderFormState(value, control._proxyFormState, true)) {\n      control._formState = Object.assign(Object.assign({}, control._formState), value);\n      updateFormState(Object.assign({}, control._formState));\n    }\n  }, [control]);\n  useSubscribe({\n    subject: control._subjects.state,\n    callback\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"mappings":"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","names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","name","substring","search","isNameInFieldArray","names","some","current","getNodeParentName","filter","Boolean","val","undefined","get","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","omit","source","copy","HookFormContext","React","createContext","useFormContext","useContext","props","Provider","children","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","_key","keys","length","shouldRenderFormState","formStateData","isEmptyObject","find","shouldSubscribeByName","signalName","exact","convertToArrayPayload","currentName","startsWith","useSubscribe","_props","useRef","useEffect","tearDown","subscription","unsubscribe","disabled","subject","subscribe","next","callback","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","_mounted","useCallback","_subjects","state","getProxyFormState","generateWatchOutput","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","useWatch","fieldValues","values","_formValues","updateValue","objectHasFunction","_getWatch","_removeUnmounted","useController","shouldUnregister","isArrayField","array","_defaultValues","_registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","_stateFlags","action","unregister","getEventValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","getFieldState","Controller","render","appendErrors","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","generateId","d","performance","now","c","r","Math","random","toString","options","shouldFocus","focusName","focusIndex","isWatched","isBlurEvent","has","watchName","slice","append","cloneObject","Set","insert","moveArrayAt","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","removeArrayAt","sort","a","b","swapArrayAt","indexA","indexB","updateAt","useFieldArray","keyName","setFields","_getFieldArray","ids","_fieldIds","_actioned","_ref","fieldArrayName","updateValues","updatedFieldArrayValues","_updateFieldArray","append$1","appendValue","appendAt","getFocusFieldName","argA","fillEmptyArray","prepend$1","prependValue","prependAt","remove","insert$1","insertValue","insertAt","argB","swap","move","update","item","_executeSchema","then","error","_updateValid","useMemo","createSubject","_observers","observer","push","o","observers","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","isConnected","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","isBoolean","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","defaultResult","validResult","option","attributes","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","_ref3","isCheckBox","getCheckboxValue","getResolverOptions","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","isValidElement","getValidateError","isMessage","validationData","inputValue","inputRef","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldUpdateFieldsAndErrors","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","live","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","shouldSkipValidation","hasValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","invalid","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","concat","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"sources":["/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isDateObject.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isObject.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getEventValue.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getNodeParentName.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/compact.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isUndefined.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/get.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/constants.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/omit.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/useFormContext.tsx","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getProxyFormState.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isEmptyObject.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/shouldSubscribeByName.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/useSubscribe.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/useFormState.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isString.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/generateWatchOutput.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isFunction.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/objectHasFunction.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/useWatch.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/useController.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/controller.tsx","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/appendErrors.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isKey.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/stringToPath.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/set.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/focusFieldBy.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/generateId.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getFocusFieldName.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/isWatched.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/append.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/cloneObject.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/fillEmptyArray.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/insert.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/move.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/prepend.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/remove.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/swap.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/update.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/useFieldArray.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/createSubject.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isPrimitive.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/deepEqual.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/getValidationModes.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isBoolean.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isFileInput.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isHTMLElement.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isMultipleSelect.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isRadioInput.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isWeb.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/live.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/unset.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getDirtyFields.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getCheckboxValue.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getFieldValueAs.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getRadioValue.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getFieldValue.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getResolverOptions.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isRegex.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getRuleValue.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/hasValidation.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/skipValidation.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/utils/isMessage.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getValidateError.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/getValueAndMessage.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/validateField.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/logic/createFormControl.ts","/Users/botainaeromaisabenkablia/Documents/GitHub/Portfolio/node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default <TValue>(value: TValue[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {} as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  exact && signalName\n    ? name === signalName\n    : !name ||\n      !signalName ||\n      name === signalName ||\n      convertToArrayPayload(name).some(\n        (currentName) =>\n          currentName &&\n          (currentName.startsWith(signalName) ||\n            signalName.startsWith(currentName)),\n      );\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n  const _mounted = React.useRef(true);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (value) =>\n      _mounted.current &&\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(value, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    [control, exact],\n  );\n\n  useSubscribe({\n    disabled,\n    callback,\n    subject: control._subjects.state,\n  });\n\n  React.useEffect(\n    () => () => {\n      _mounted.current = false;\n    },\n    [],\n  );\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isObject from './utils/isObject';\nimport isUndefined from './utils/isUndefined';\nimport objectHasFunction from './utils/objectHasFunction';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const callback = React.useCallback(\n    (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current) ||\n            (isObject(fieldValues) && !objectHasFunction(fieldValues))\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : isUndefined(fieldValues)\n            ? defaultValue\n            : fieldValues,\n        );\n      }\n    },\n    [control, exact, defaultValue],\n  );\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback,\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: !isArrayField,\n  }) as UnpackNestedValue<FieldPathValue<TFieldValues, TName>>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n\n  const _registerProps = React.useRef(\n    control.register(name, {\n      ...props.rules,\n      value,\n    }),\n  );\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      (\n        isArrayField\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      )\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  return {\n    field: {\n      name,\n      value,\n      onChange: React.useCallback(\n        (event) => {\n          _registerProps.current.onChange({\n            target: {\n              value: getEventValue(event),\n              name: name as InternalFieldName,\n            },\n            type: EVENTS.CHANGE,\n          });\n        },\n        [name],\n      ),\n      onBlur: React.useCallback(() => {\n        _registerProps.current.onBlur({\n          target: {\n            value: get(control._formValues, name),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      }, [name, control]),\n      ref: React.useCallback(\n        (elm) => {\n          const field = get(control._fields, name);\n\n          if (elm && field && elm.focus) {\n            field._f.ref = {\n              focus: () => elm.focus(),\n              setCustomValidity: (message: string) =>\n                elm.setCustomValidity(message),\n              reportValidity: () => elm.reportValidity(),\n            };\n          }\n        },\n        [name, control._fields],\n      ),\n    },\n    formState,\n    fieldState: control.getFieldState(name, formState),\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport isWatched from './logic/isWatched';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  const callback = React.useCallback(({ values, name: fieldArrayName }) => {\n    if (fieldArrayName === _name.current || !fieldArrayName) {\n      const fieldValues = get(values, _name.current, []);\n      setFields(fieldValues);\n      ids.current = fieldValues.map(generateId);\n    }\n  }, []);\n\n  useSubscribe({\n    callback,\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._updateFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray(name),\n      index,\n      value,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      <T>(data: T): T => data,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    isWatched(name, control._names) && control._subjects.state.next({});\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n};\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        parseFloat(inputValue as string);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndErrors = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndErrors && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndErrors &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: refs.concat(fieldRef).filter(live),\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb && isUndefined(formValues)) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _fields = {};\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}